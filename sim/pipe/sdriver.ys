#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	
  irmovl Stack, %esp    # Set up stack pointer
  irmovl Stack, %ebp    # Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $4, %eax # concatenate 4 elements from src to dst
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Concatenates a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# Describe how and why you modified the baseline code.
#
# (*) Note: Pseudo-end of array is 0xccaaff.
##################################################################
# Do not modify this portion (Function Prolog)
ncopy:  pushl %ebp    # Save old frame pointer
  rrmovl %esp,%ebp    # Set up new frame pointer
  pushl %esi          # Save callee-save regs
  pushl %ebx
  pushl %edi
  mrmovl 8(%ebp),%ebx   # src
  mrmovl 16(%ebp),%edx  # len
  mrmovl 12(%ebp),%ecx  # dst
##################################################################
# You can modify this portion 
  andl %edx,%edx    # len <= 0?
  jle Done          # if so, goto Done:
  irmovl $-4,%eax
  addl %eax,%ecx
Move:
  irmovl $4,%eax
  addl %eax,%ecx
  mrmovl (%ecx),%esi    # *dst++
  irmovl $0xccaaff,%eax # *dst == pseudo-end of file?
  xorl %eax,%esi
  jne Move              # not? goto Move
  irmovl $4,%eax        # Maintain pseudo-end of file
  addl %eax,%ecx
  xorl %eax,%eax
Loop: 
  mrmovl (%ebx), %esi   # read val from src...
  rmmovl %esi, (%ecx)   # ...and store it to dst
  andl %esi, %esi       # val <= 0?
  jle Npos              # if so, goto Npos:
  irmovl $1, %edi
  addl %edi, %eax       # count++
Npos: 
  irmovl $1, %edi
  subl %edi, %edx       # len--
  irmovl $4, %edi
  addl %edi, %ebx       # src++
  addl %edi, %ecx       # dst++
  andl %edx,%edx        # len > 0?
  jg Loop               # if so, goto Loop:
##################################################################
# Do not modify the following section of code (Function epiloge)
Done:
  popl %edi               # Restore callee-save registers
  popl %ebx
  popl %esi
  rrmovl %ebp, %esp
  popl %ebp
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 1
	.long -2
	.long 3
	.long -4
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xffaacc
	.long 0xccaaff
	.long 0xffaacc
	.long 0xffaacc
	.long 0xffaacc
	.long 0xffaacc
	.long 0xffaacc
	.long 0xffaacc
	.long 0xffaacc
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
