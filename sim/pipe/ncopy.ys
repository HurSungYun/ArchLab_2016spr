#/* $begin ncopy-ys */

# HUR SUNGYUN 2014-19768

# I used 5 things for decreasing CPE

# 1. loop unrolling
# There are too much instructions executed for adding 4 or 1 in original code. Therefore, I decided to unroll the loop and make the percentage of instructions for increasing index values lower. I divided by 3, so I increase index by 12 or 3 each. It makes my program faster by saving cycles that used for increasing index

# 2. taken branch
# To prevent the waste of mis predicted branch, I set the order of jumps to highly selected order. For example, Jumping more than 3 values first, and then 2 values, and one value lastly. It is more likely to reduce cycle because most of arrays have more than 3 values. This makes my program more faster.

# 3. preventing stall or bubble
# I reordered some instructions for preventing stall or bubble. For example, I set mrmovl .., %esi apart from rmmovl %esi, ,,,, . This saves one cycle for waiting the mrmovl done first. 

# 4. change into iaddl, isubl
# it reduce two cycle into one cycle. I stated detail in pipe-full.hcl

# 5. make Move: efficient
# At first, Move is not that efficient because of "adding first, process later"/ Therefore, I changed it into "process first, adding later". It makes my program a bit faster.


##################################################################
# ncopy.ys - Concatenates a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# Describe how and why you modified the baseline code.
#
# (*) Note: Pseudo-end of array is 0xccaaff.
##################################################################
# Do not modify this portion (Function Prolog)
ncopy:  pushl %ebp    # Save old frame pointer
  rrmovl %esp,%ebp    # Set up new frame pointer
  pushl %esi          # Save callee-save regs
  pushl %ebx
  pushl %edi
  mrmovl 8(%ebp),%ebx   # src
  mrmovl 16(%ebp),%edx  # len
  mrmovl 12(%ebp),%ecx  # dst
##################################################################
# You can modify this portion 
  andl %edx,%edx 
  jle Done          
  irmovl $0xccaaff,%eax

Move:
  mrmovl (%ecx),%esi
  iaddl $4,%ecx
  xorl %eax,%esi
  jne Move

PreLoop:
  xorl %eax,%eax
  isubl $2, %edx
  jg Loop1
  iaddl $1, %edx
  jg Two
  je One

Loop1:
  iaddl $12, %ebx
  iaddl $12, %ecx
  mrmovl -12(%ebx), %esi
  mrmovl -8(%ebx), %edi   
  andl %esi, %esi
  jle Loop2
  iaddl $1, %eax
Loop2: 
  rmmovl %edi, -8(%ecx)   
  rmmovl %esi, -12(%ecx)
  mrmovl -4(%ebx), %esi 
  andl %edi, %edi       
  jle Loop3             
  iaddl $1, %eax
Loop3:
  isubl $3, %edx
  rmmovl %esi, -4(%ecx)
  andl %esi, %esi
  jle LoopController
  iaddl $1, %eax
LoopController:
  andl %edx,%edx        
  jg Loop1   
  iaddl $1, %edx
  je One
  jl Done
Two:
  mrmovl 4(%ebx), %esi
  rmmovl %esi, 4(%ecx)
  andl %esi, %esi
  jle One
  iaddl $1, %eax
One:
  mrmovl (%ebx), %edi
  rmmovl %edi, (%ecx)
  andl %edi, %edi
  jle Done
  iaddl $1, %eax

##################################################################
  
# Do not modify the following section of code (Function epiloge)
Done:
  popl %edi               # Restore callee-save registers
  popl %ebx
  popl %esi
  rrmovl %ebp, %esp
  popl %ebp
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
